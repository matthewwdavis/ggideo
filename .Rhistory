graphic <- primary_ideogram(plotting.table, plot_title = title_plot, chr_color = color_chr, chr_size = size_chr,
tel_color = color_tel, tel_shape = shape_tel, y_scale = scale_y, y_scale_suffix = suffix_y_scale,
legend_pos = pos_legend, legend_size = size_legend)
return(list(table = plotting.table, visualization = graphic))
}
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
tester$visualization
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta", color_chr = "yellow")
tester$visualization
ggideoprimary <- function(path_fasta, chr_names = "Chr", tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 50, sample_name = NULL, title_plot = NULL, color_chr = "dodgerblue2",
size_chr = 8, color_tel = "black", shape_tel = 16, scale_y = 1e-6, suffix_y_scale = "Mb",
pos_legend = "bottom", size_legend = 0.25){
# Read in fasta
genome <- readDNAStringSet(path_fasta)
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- srr44_noec_count %>%
filter(CCCTAAA_Counts >= min_tel_count | TTTAGGG_Counts >= min_tel_count)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Set levels so that chromosomes are plotted in the proper order
plotting.table$Chromosome <- factor(plotting.table$Chromosome, levels = unique(plotting.table$Chromosome))
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = title_plot, chr_color = color_chr, chr_size = size_chr,
tel_color = color_tel, tel_shape = shape_tel, y_scale = scale_y, y_scale_suffix = suffix_y_scale,
legend_pos = pos_legend, legend_size = size_legend)
return(list(genomic.table = plotting.table, visualization = graphic))
}
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta", color_chr = "yellow")
tester$visualization
tester$genomic.table
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta", color_chr = "purple")
tester$visualization
tester$genomic.table
getwd()
setw\
setwd("~/Projects/ggideo")
packageVersion("tidyverse")
usethis::use_package("tidyverse", min_version = "2.0.0")
packageVersion("dplyr")
usethis::use_package("dplyr", min_version = "1.1.4")
packageVersion("data.table")
usethis::use_package("data.table", min_version = "1.16.2")
packageVersion("scales")
usethis::use_package("scales", min_version = "1.3.0")
packageVersion("Biostrings")
usethis::use_package("Biostrings", min_version = "2.74.0")
packageVersion("pbapply")
usethis::use_package("pbapply", min_version = "1.7.2")
??substrong
??substring
?substring
packageVersion("stringr")
usethis::use_package("stringr", min_version = "1.5.1")
rename_chr <- function(data, chr_string = "Chr") {
data$Chromosome <- str_extract(data$Chromosome, "\\d+") # Extract only numeric
data$Chromosome <- as.numeric(data$Chromosome)  # make numeric
return(data)
}
ggideoprimary <- function(path_fasta, chr_names = "Chr", tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 25, sample_name = NULL, title_plot = NULL, color_chr = "dodgerblue2",
size_chr = 8, color_tel = "black", shape_tel = 16, scale_y = 1e-6, suffix_y_scale = "Mb",
pos_legend = "bottom", size_legend = 0.25){
# Read in fasta
genome <- readDNAStringSet(path_fasta)
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- srr44_noec_count %>%
filter(CCCTAAA_Counts >= min_tel_count | TTTAGGG_Counts >= min_tel_count)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Set levels so that chromosomes are plotted in the proper order
plotting.table$Chromosome <- factor(plotting.table$Chromosome, levels = unique(plotting.table$Chromosome))
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = title_plot, chr_color = color_chr, chr_size = size_chr,
tel_color = color_tel, tel_shape = shape_tel, y_scale = scale_y, y_scale_suffix = suffix_y_scale,
legend_pos = pos_legend, legend_size = size_legend)
return(list(genomic.table = plotting.table, visualization = graphic))
}
usethis::use_package("tidyverse", min_version = "2.0.0")
help(lm);
library(roxygen2)
oxygenise()
roxygenise()
roxygenise()
roxygenise(telomere_repeat_number.Rd)
roxygenize(clean=TRUE)
library(ggideo)
install_github("matthewwdavis/ggideo")
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta", color_chr = "purple")
fasta <- readDNAStringSet("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
genome <- readDNAStringSet("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
length.table
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 25 | TTTAGGG_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "strep", genome_size = genome.size)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(plotting.table$Chromosome))))])
plotting.table$Chromosome
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
length.table
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
length.table
#'
#' @return A data frame containing only the rows where the `Chromosome` column contains the specified `chr_string`.
#'
#' @examples
#' # Example usage
#' data <- data.frame(Chromosome = c("Chr1", "Chr2", "Scaffold1", "Chr3"),
#'                    Value = c(100, 200, 300, 400))
#' select_chr(data, chr_string = "Chr")
#'
#' @export
select_chr <- function(data, chr_string = "Chr"){
# Remove extraneous scaffolds
data <- data[grepl(chr_string, data$Chromosome),]
# Remove leading zero from chromosome numbers 01-09
data$Chromosome <- sub(paste0("^", chr_string, "0(\\d)$"), paste0(chr_string, "\\1"), data$Chromosome)
return(data)
}
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
length.table
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 25 | TTTAGGG_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "strep", genome_size = genome.size)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(plotting.table$Chromosome))))])
plotting.table$Chromosome
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = title_plot, chr_color = color_chr, chr_size = size_chr,
tel_color = color_tel, tel_shape = shape_tel, y_scale = scale_y, y_scale_suffix = suffix_y_scale,
legend_pos = pos_legend, legend_size = size_legend)
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
plotting.table
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
length.table
# Set levels so that chromosomes are plotted in the proper order by number
length.table$Chromosome <- factor(length.table$Chromosome,
levels = unique(length.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(length.table$Chromosome))))])
length.table$Chromosome
length.table
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
tel_count.table
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 25 | TTTAGGG_Counts >= 25)
tel.table
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
plotting.table$Chromosome
plotting.table$Chromosome
enome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 25 | TTTAGGG_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
# Set levels so that chromosomes are plotted in the proper order by number
length.table$Chromosome <- factor(length.table$Chromosome,
levels = unique(length.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(length.table$Chromosome))))])
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e5, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 5 | TTTAGGG_Counts >= 5)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
plotting.table$Chromosome
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(plotting.table$Chromosome))))])
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
#' The function identifies and removes leading zeros from chromosome identifiers that match the specified prefix in the format `Chr01`, `Chr02`, ..., `Chr09`.
#' This adjustment ensures chromosome numbers are consistently formatted for downstream analysis.
#'
#' @examples
#' # Example usage
#' data <- data.frame(Chromosome = c("Chr01", "Chr02", "Chr10"))
#' remove_lead_0s(data, chr_string = "Chr")
#' # Output will be a data frame with Chromosome values: "Chr1", "Chr2", "Chr10"
#'
#' @export
remove_lead_0s <- function(data, chr_string = "Chr") {
# Remove leading zero from chromosome numbers 01-09
data$Chromosome <- sub(paste0("^", chr_string, "0(\\d)$"), paste0(chr_string, "\\1"), data$Chromosome)
return(data)
}
# Read in fasta
genome <- readDNAStringSet(path_fasta)
#'
#' @return A data frame containing only the rows where the `Chromosome` column contains the specified `chr_string`.
#'
#' @examples
#' # Example usage
#' data <- data.frame(Chromosome = c("Chr1", "Chr2", "Scaffold1", "Chr3"),
#'                    Value = c(100, 200, 300, 400))
#' select_chr(data, chr_string = "Chr")
#'
#' @export
select_chr <- function(data, chr_string = "Chr"){
# Remove extraneous scaffolds
data <- data[grepl(chr_string, data$Chromosome),]
return(data)
}
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e5, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 25 | TTTAGGG_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table)
plotting.table
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "Chr")
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e5, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 25 | TTTAGGG_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
plotting.table
#'
#' @return A data frame containing only the rows where the `Chromosome` column contains the specified `chr_string`.
#'
#' @examples
#' # Example usage
#' data <- data.frame(Chromosome = c("Chr1", "Chr2", "Scaffold1", "Chr3"),
#'                    Value = c(100, 200, 300, 400))
#' select_chr(data, chr_string = "Chr")
#'
#' @export
select_chr <- function(data, chr_string = "Chr"){
# Remove extraneous scaffolds
data <- data[grepl(chr_string, data$Chromosome),]
return(data)
}
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table,)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
length.table
genome.size
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e5, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
tel_count.table
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 25 | TTTAGGG_Counts >= 25)
tel.table
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 40 | TTTAGGG_Counts >= 40)
tel.table
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 100 | TTTAGGG_Counts >= 100)
tel.table
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
tel.table
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
plotting.table
View(plotting.table)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(plotting.table$Chromosome))))])
plotting.table$Chromosome
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(plotting.table$Chromosome))))])
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
View(graphic)
graphic
plot(graphic)
chr_string = "Chr"
chr_names = "Chr"
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
length.table
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
length.table
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table)
plotting.table
chr_names = "Chr"
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
plotting.table$Chromosome
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
plot(graphic)
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
getwd()
devtools::document()
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
devtools::install_github("matthewwdavis/ggideo")
