ggideo <- function(table){
plot <- table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
size = 6,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold")) +
#guides(size = guide_legend(override.aes = list(size = 1))) # Adjust legend size here
return(plot)
}
ggideo(plotting.table)
# List all R script files in the folder
files <- list.files("~/Projects/ggideo/R", pattern = "\\.R$", full.names = TRUE)
# Source each file
sapply(files, source)
# List all R script files in the folder
files <- list.files("~/Projects/ggideo/R", pattern = "\\.R$", full.names = TRUE)
files
# Source each file
sapply(files, source)
# List all R script files in the folder
files <- list.files("~/Projects/ggideo/R", pattern = "\\.R$", full.names = TRUE)
files <- files[!grepl("geomideoprimary\\.R$", files)]
# Source each file
sapply(files, source)
files <- files[!grepl("geomideoprimary.R", files)]
files
files <- files[!grepl("/Users/davismw/Projects/ggideo/R/ggideoprimary.R"", files)]
# Source each file
sapply(files, source)
# Function
# Function to split a sequence into windows
create_windows <- function(genome, window_size) {
n_windows <- ceiling(nchar(genome) / window_size) # I don't think this is a necessary line
windows <- substring(genome, seq(1, nchar(genome), window_size),
seq(window_size, nchar(genome) + window_size, window_size))
return(windows)
}
# Function to count occurrences of a specific sequence in a window
count_sequence <- function(window, sequence) {
count <- sum(countPattern(sequence, window))
return(count)
}
# Function for the for loop to create windows and count sequences
telomere_repeat_number <- function(fasta, window = 1e6, dt) {
for (i in 1:length(fasta)) {
seq_name <- names(fasta[i])
sequence <- as.character(fasta[i])
# Split the sequence into 1 Mb windows
windows <- create_windows(genome = sequence, window_size = window)
# Count occurrences of the first telomere sequence in each window
telomere_start_counts <- sapply(windows, count_sequence, sequence = telomere_start)
# Count occurrences of the last telomere sequence in each window
telomere_end_counts <- sapply(windows, count_sequence, sequence = telomere_end)
# Create a data table for the window counts
dt_chromosome <- data.table(Chromosome = rep(seq_name, length(windows)),
Window = seq_along(windows),
CCCTAAA_Counts = telomere_start_counts,
TTTAGGG_Counts = telomere_end_counts)
# Append the counts for the current chromosome to the main data table
dt <- rbind(dt, dt_chromosome)
}
return(dt)
}
# Renaming chromosomes
rename_chr <- function(data) {
# Remove extraneous scaffolds
data <- data[grepl("Chr", data$Chromosome),] # Keep chromosomes
files <- files[!grepl("/Users/davismw/Projects/ggideo/R/ggideoprimary.R", files)]
files
# Source each file
sapply(files, source)
## Testing functions
srr44_noec.fa <- readDNAStringSet("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
## Testing functions
srr44_noec.fa <- readDNAStringSet("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
srr44_noec_length <- data.table(Chromosome = names(srr44_noec.fa), Length = width(srr44_noec.fa))[order(-Length)]
srr44_noec_length <- select_chr(srr44_noec_length)
srr44_noec_genome_size <- sum(srr44_noec_length$Length)
telomere_start <- "CCCTAAACCCTAAACCCTAAA"
telomere_end <- "TTTAGGGTTTAGGGTTTAGGG"
srr44_noec_count <- telomere_repeat_number(fasta = srr44_noec.fa)
head(srr44_noec_count)
srr44_noec_tel <- srr44_noec_count %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
plotting.table <- genome_table(srr44_noec_length, srr44_noec_tel, name = "srr44_noec_tel", genome_size = srr44_noec_genome_size)
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
size = 6,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold")) +
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
size = 6,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 6,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.3, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(1, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = c(.1,.1),
legend.key.size = unit(.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
primary_ideogram <- function(genome.table, plot_title = NULL, chr_color = "orangered", chr_size = 8, tel_color = "black", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb", legend_pos = "bottom", legend_size = 0.25){
p <- genome.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = tel_shape,
color = tel_color) +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = tel_shape,
color = tel_color) +
scale_y_continuous(labels = label_number(scale = y_scale, suffix = y_scale_suffix)) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length", plot_title = NULL) +
theme_classic(base_size = 6) +
theme(legend.position = legend_pos,
legend.key.size = unit(legend_size, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
return(p)
}
primary_ideogram(plotting.table)
ggsave("~/Desktop/test.pdf", height = 3, width = 4)
rename_chr(srr44_noec_count)
rename_chr(srr44_noec_tel)
rename_chr(srr44_noec_length)
unique(plotting.table$Chromosome)
plotting.table$Chromosome <- factor(plotting.table$Chromosome, levels = unique(plotting.table$Chromosome))
plotting.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = "orange",
linewidth = 8,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = 16,
color = "black") +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = 16,
color = "black") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(.25, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
primary_ideogram(plotting.table)
primary_ideogram <- function(genome.table, plot_title = NULL, chr_color = "dodgerblue2", chr_size = 8, tel_color = "black", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb", legend_pos = "bottom", legend_size = 0.25){
p <- genome.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = tel_shape,
color = tel_color) +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = tel_shape,
color = tel_color) +
scale_y_continuous(labels = label_number(scale = y_scale, suffix = y_scale_suffix)) +
labs(y = "Chromosome Length", x = "Chromosome", size = "Telomere Length", plot_title = NULL) +
theme_classic(base_size = 6) +
theme(legend.position = legend_pos,
legend.key.size = unit(legend_size, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
return(p)
}
primary_ideogram(plotting.table)
strrep(telomere_start, 3)
tel_start = "CCCTAAA"
tel_end = "TTTAGGG"
telomere_repeat_number <- function(fasta, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG") {
# Set telomeres
telomere_start <- strrep(tel_start, 3)
telomere_end <- strrep(tel_end, 3)
# Use pblapply to loop through each element in 'fasta'
results_list <- pblapply(seq_along(fasta), function(i) {
seq_name <- names(fasta[i])
sequence <- as.character(fasta[i])
# Split the sequence into 1 Mb windows
windows <- create_windows(genome = sequence, window_size = window)
# Count occurrences of the first telomere sequence in each window
telomere_start_counts <- sapply(windows, count_sequence, sequence = telomere_start)
# Count occurrences of the last telomere sequence in each window
telomere_end_counts <- sapply(windows, count_sequence, sequence = telomere_end)
# Create a data table for the window counts
dt_chromosome <- data.table(
Chromosome = rep(seq_name, length(windows)),
Window = seq_along(windows),
CCCTAAA_Counts = telomere_start_counts,
TTTAGGG_Counts = telomere_end_counts
)
return(dt_chromosome)
})
# Combine the list of data tables into one data table
dt <- rbindlist(results_list)
return(dt)
}
ggideoprimary <- function(path_fasta, chr_names = "Chr", tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 50, sample_name = NULL, title_plot = NULL, color_chr = "dodgerblue2",
size_chr = 8, color_tel = "black", shape_tel = 16, scale_y = 1e-6, suffix_y_scale = "Mb",
pos_legend = "bottom", size_legend = 0.25){
# Read in fasta
genome <- readDNAStringSet(path_fasta)
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- srr44_noec_count %>%
filter(CCCTAAA_Counts >= min_tel_count | TTTAGGG_Counts >= min_tel_count)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Set levels so that chromosomes are plotted in the proper order
plotting.table$Chromosome <- factor(plotting.table$Chromosome, levels = unique(plotting.table$Chromosome))
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = title_plot, chr_color = color_chr, chr_size = size_chr,
tel_color = color_tel, tel_shape = shape_tel, y_scale = scale_y, y_scale_suffix = suffix_y_scale,
legend_pos = pos_legend, legend_size = size_legend)
return(list(table = plotting.table, visualization = graphic))
}
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
tester$visualization
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta", color_chr = "yellow")
tester$visualization
ggideoprimary <- function(path_fasta, chr_names = "Chr", tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 50, sample_name = NULL, title_plot = NULL, color_chr = "dodgerblue2",
size_chr = 8, color_tel = "black", shape_tel = 16, scale_y = 1e-6, suffix_y_scale = "Mb",
pos_legend = "bottom", size_legend = 0.25){
# Read in fasta
genome <- readDNAStringSet(path_fasta)
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- srr44_noec_count %>%
filter(CCCTAAA_Counts >= min_tel_count | TTTAGGG_Counts >= min_tel_count)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Set levels so that chromosomes are plotted in the proper order
plotting.table$Chromosome <- factor(plotting.table$Chromosome, levels = unique(plotting.table$Chromosome))
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = title_plot, chr_color = color_chr, chr_size = size_chr,
tel_color = color_tel, tel_shape = shape_tel, y_scale = scale_y, y_scale_suffix = suffix_y_scale,
legend_pos = pos_legend, legend_size = size_legend)
return(list(genomic.table = plotting.table, visualization = graphic))
}
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta", color_chr = "yellow")
tester$visualization
tester$genomic.table
tester <- ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta", color_chr = "purple")
tester$visualization
tester$genomic.table
getwd()
setw\
setwd("~/Projects/ggideo")
packageVersion("tidyverse")
usethis::use_package("tidyverse", min_version = "2.0.0")
packageVersion("dplyr")
usethis::use_package("dplyr", min_version = "1.1.4")
packageVersion("data.table")
usethis::use_package("data.table", min_version = "1.16.2")
packageVersion("scales")
usethis::use_package("scales", min_version = "1.3.0")
packageVersion("Biostrings")
usethis::use_package("Biostrings", min_version = "2.74.0")
packageVersion("pbapply")
usethis::use_package("pbapply", min_version = "1.7.2")
??substrong
??substring
?substring
packageVersion("stringr")
usethis::use_package("stringr", min_version = "1.5.1")
rename_chr <- function(data, chr_string = "Chr") {
data$Chromosome <- str_extract(data$Chromosome, "\\d+") # Extract only numeric
data$Chromosome <- as.numeric(data$Chromosome)  # make numeric
return(data)
}
ggideoprimary <- function(path_fasta, chr_names = "Chr", tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 25, sample_name = NULL, title_plot = NULL, color_chr = "dodgerblue2",
size_chr = 8, color_tel = "black", shape_tel = 16, scale_y = 1e-6, suffix_y_scale = "Mb",
pos_legend = "bottom", size_legend = 0.25){
# Read in fasta
genome <- readDNAStringSet(path_fasta)
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))[order(-Length)]
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- srr44_noec_count %>%
filter(CCCTAAA_Counts >= min_tel_count | TTTAGGG_Counts >= min_tel_count)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Set levels so that chromosomes are plotted in the proper order
plotting.table$Chromosome <- factor(plotting.table$Chromosome, levels = unique(plotting.table$Chromosome))
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = title_plot, chr_color = color_chr, chr_size = size_chr,
tel_color = color_tel, tel_shape = shape_tel, y_scale = scale_y, y_scale_suffix = suffix_y_scale,
legend_pos = pos_legend, legend_size = size_legend)
return(list(genomic.table = plotting.table, visualization = graphic))
}
usethis::use_package("tidyverse", min_version = "2.0.0")
help(lm);
library(roxygen2)
oxygenise()
roxygenise()
roxygenise()
roxygenise(telomere_repeat_number.Rd)
roxygenize(clean=TRUE)
library(ggideo)
